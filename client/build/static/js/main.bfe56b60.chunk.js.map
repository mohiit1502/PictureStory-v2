{"version":3,"sources":["pages/Login/actions.js","components/molecules/PageLoader/PageLoader.jsx","components/molecules/PageLoader/index.js","router.jsx","pages/Login/reducer.js","pages/Home/reducer.js","reducer.js","main.js","services/data.service.ts","pages/Home/actions.js"],"names":["LOGIN_DATA_STATE_RECEIVED","UPDATE_FORM_VALUES","UPDATE_FORM_ERRORS","initializeLogin","dispatch","updateFormValues","formValues","type","payload","updateFormErrors","formErrors","PageLoader","props","className","defaultProps","propTypes","LoadableHome","Loadable","loader","loading","LoadableLogin","LoadableEcstaticaCreator","LoadableEcstaticaViewer","Router","store","this","exact","path","component","React","Component","PropTypes","object","initialState","Immutable","Map","reducer","state","action","mergeDeep","chatMessages","HOME_DATA_STATE_RECEIVED","SAVE_RETRIEVED_IMAGES","UPDATE_BACKGROUND","UPDATE_MODAL_STATE","UPDATE_UPLOAD_MODAL_STATE","TOGGLE_CHAT_VIEW","UPDATE_CHAT_MESSAGES","console","log","get","setIn","combineReducers","data","pages","home","homeReducer","login","loginReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","serialize","immutable","compose","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","DataService","fetch","then","res","json","catch","err","ds","initializeHome","getFeaturedImages","saveRetrievedImages","images","updateBackground","backgroundImage","modalOpened","updateModalState","modalState","updateUploadModalState","uploadModalState","uploadModalOpened","toggleChatView","chatView","updateChatMessages","message"],"mappings":"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","file":"static/js/main.bfe56b60.chunk.js","sourcesContent":["export const LOGIN_DATA_STATE_RECEIVED = 'LOGIN_DATA_STATE_RECEIVED'\nexport const UPDATE_FORM_VALUES = 'UPDATE_BILLING_FORM_VALUES'\nexport const UPDATE_FORM_ERRORS = 'UPDATE_BILLING_FORM_ERRORS'\n\nexport const updateLoginDataState = (payload) => ({type: LOGIN_DATA_STATE_RECEIVED, payload})\n\nexport const initializeLogin = () => (dispatch) => {\n    // return Promise.all([\n    //     dispatch(initializeApp())\n    // ])\n    // .then(() => ({statusCode: 200}))\n    // .catch((err) => ({statusCode: err.statusCode || 500}))\n}\n\nexport const updateFormValues = (formValues) => {\n    return {\n        type: UPDATE_FORM_VALUES,\n        payload: formValues\n    }\n}\n\nexport const updateFormErrors = (formErrors) => {\n    return {\n        type: UPDATE_FORM_ERRORS,\n        payload: formErrors\n    }\n}\n    ","import React from 'react';\n\nconst PageLoader = props => {\n  return (\n      <div className='c-PageLoader'>\n        <div className='is-animate'>\n          <div className='l'>l</div>\n          <div className='l'>o</div>\n          <div className='l'>a</div>\n          <div className='l'>d</div>\n          <div className='l'>i</div>\n          <div className='l'>n</div>\n          <div className='l'>g</div>\n        </div>\n      </div>\n  )\n};\n\nPageLoader.defaultProps = {\n\n};\n\nPageLoader.propTypes = {\n\n};\n\nexport default PageLoader;","import PageLoader from './PageLoader.jsx';\n\nexport default PageLoader;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Provider} from 'react-redux'\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport PageLoader from './components/molecules/PageLoader'\nimport Loadable from 'react-loadable'\n\nexport const LoadableHome = Loadable({\n    loader: () => import('./pages/Home'),\n    loading: PageLoader\n})\n\nexport const LoadableLogin = Loadable({\n    loader: () => import('./pages/Login'),\n    loading: PageLoader\n})\n\nexport const LoadableEcstaticaCreator = Loadable({\n    loader: () => import('./pages/ecstatica/Creator'),\n    loading: PageLoader\n})\n\nexport const LoadableEcstaticaViewer = Loadable({\n    loader: () => import('./pages/ecstatica/Viewer'),\n    loading: PageLoader\n})\n\nclass Router extends React.Component {\n\n    render() {\n        const {store} = this.props\n        return (\n            <Provider store={store}>\n                <BrowserRouter>\n                    <Route exact path=\"/\" component={LoadableLogin} />\n                    <Route path=\"/home\" component={LoadableHome} />\n                    <Route path=\"/login\" component={LoadableLogin} />\n                    <Route path=\"/ecstatica/create\" component={LoadableEcstaticaCreator} />\n                    <Route path=\"/ecstatica/view\" component={LoadableEcstaticaViewer} />\n                </BrowserRouter>\n            </Provider>\n        )\n    }\n}\n\nRouter.propTypes = {\n    store: PropTypes.object\n}\n\nexport default Router\n","import Immutable from 'immutable'\n\nimport {LOGIN_DATA_STATE_RECEIVED, UPDATE_FORM_ERRORS, UPDATE_FORM_VALUES} from './actions'\n\nconst initialState = Immutable.Map()\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOGIN_DATA_STATE_RECEIVED:\n        case UPDATE_FORM_ERRORS:\n        case UPDATE_FORM_VALUES:\n            return state.mergeDeep(action.payload)\n        default:\n            return state\n    }\n}\n\nexport default reducer\n","import Immutable from 'immutable'\n\nimport {\n    HOME_DATA_STATE_RECEIVED,\n    SAVE_RETRIEVED_IMAGES,\n    UPDATE_FORM_ERRORS,\n    UPDATE_FORM_VALUES,\n    UPDATE_BACKGROUND,\n    UPDATE_MODAL_STATE,\n    UPDATE_UPLOAD_MODAL_STATE,\n    TOGGLE_CHAT_VIEW,\n    UPDATE_CHAT_MESSAGES\n} from './actions'\n\nconst initialState = Immutable.Map({\n    formErrors: [],\n    formValues: [],\n    chatMessages: []\n})\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case HOME_DATA_STATE_RECEIVED:\n        case SAVE_RETRIEVED_IMAGES:\n        case UPDATE_FORM_ERRORS:\n        case UPDATE_FORM_VALUES:\n        case UPDATE_BACKGROUND:\n        case UPDATE_MODAL_STATE:\n        case UPDATE_UPLOAD_MODAL_STATE:\n        case TOGGLE_CHAT_VIEW:\n            return state.mergeDeep(action.payload)\n        case UPDATE_CHAT_MESSAGES:\n            console.log(...state.get('chatMessages'))\n            const chatMessages = [...state.get('chatMessages'), action.payload]\n            console.log(chatMessages)\n            return state.setIn('chatMessages', chatMessages)\n        default:\n            return state\n    }\n}\n\nexport default reducer\n","import {combineReducers} from 'redux'\n\nimport loginReducer from './pages/Login/reducer'\nimport homeReducer from './pages/Home/reducer'\n\nexport default combineReducers({\n    data: combineReducers({\n        pages: combineReducers({\n            home: homeReducer,\n            login: loginReducer\n        })\n    })\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunk from 'redux-thunk'\nimport Immutable from 'immutable'\nimport {createStore, applyMiddleware, compose} from 'redux'\n// import * as serviceWorker from '../serviceWorker';\nimport Router from './router';\nimport reducer from './reducer'\nimport './index.scss'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        serialize: { // prettier-ignore\n            immutable: Immutable\n        }\n    }) : compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)))\n\nReactDOM.render(<Router store={store} />, document.getElementById('root'));\n\n// serviceWorker.unregister();\n","export default class DataService {\n\n  getFeaturedImages() {\n    return fetch('/images/nature')\n    .then(res => {\n      // console.log(res)\n      // console.log(res.json())\n      return res.json()\n    })\n    .catch(err => console.log(err))\n  }\n}\n","import DataService from './../../services/data.service.ts'\n\nexport const HOME_DATA_STATE_RECEIVED = 'HOME_DATA_STATE_RECEIVED'\nexport const SAVE_RETRIEVED_IMAGES = 'SAVE_RETRIEVED_IMAGES'\nexport const UPDATE_FORM_VALUES = 'UPDATE_BILLING_FORM_VALUES'\nexport const UPDATE_FORM_ERRORS = 'UPDATE_BILLING_FORM_ERRORS'\nexport const UPDATE_BACKGROUND = 'UPDATE_BACKGROUND'\nexport const UPDATE_MODAL_STATE = 'UPDATE_MODAL_STATE'\nexport const UPDATE_UPLOAD_MODAL_STATE = 'UPDATE_UPLOAD_MODAL_STATE'\nexport const TOGGLE_CHAT_VIEW = 'TOGGLE_CHAT_VIEW'\nexport const UPDATE_CHAT_MESSAGES = 'UPDATE_CHAT_MESSAGES'\n\nexport const updateHomeDataState = (payload) => ({type: HOME_DATA_STATE_RECEIVED, payload})\nconst ds = new DataService()\nexport const initializeHome = () => (dispatch) => {\n    // return Promise.all([\n    //     dispatch(initializeApp())\n    // ])\n    // .then(() => ({statusCode: 200}))\n    // .catch((err) => ({statusCode: err.statusCode || 500}))\n    ds.getFeaturedImages().then(res => {\n        // console.log(res)\n        dispatch(saveRetrievedImages(res))\n    }).catch(err => console.log(err))\n}\n\nexport const saveRetrievedImages = (images) => {\n    return {\n        type: SAVE_RETRIEVED_IMAGES,\n        payload: {images}\n    }\n}\nexport const updateFormValues = (formValues) => {\n    return {\n        type: UPDATE_FORM_VALUES,\n        payload: formValues\n    }\n}\n\nexport const updateFormErrors = (formErrors) => {\n    return {\n        type: UPDATE_FORM_ERRORS,\n        payload: formErrors\n    }\n}\n\nexport const updateBackground = (backgroundImage) => {\n    return {\n        type: UPDATE_BACKGROUND,\n        payload: {backgroundImage, modalOpened: true}\n    }\n}\n\nexport const updateModalState = (modalState) => {\n    return {\n        type: UPDATE_MODAL_STATE,\n        payload: {modalOpened: modalState}\n    }\n}\n\nexport const updateUploadModalState = (uploadModalState) => {\n    return {\n        type: UPDATE_UPLOAD_MODAL_STATE,\n        payload: {uploadModalOpened: uploadModalState}\n    }\n}\n\nexport const toggleChatView = (chatView) => {\n    return {\n        type: TOGGLE_CHAT_VIEW,\n        payload: {chatView}\n    }\n}\n\nexport const updateChatMessages = (message) => {\n    return {\n        type: UPDATE_CHAT_MESSAGES,\n        payload: message\n    }\n}\n\n    "],"sourceRoot":""}